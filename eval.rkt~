#lang racket

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CSCI 301, Spring 2025
;;
;; Lab #4
;;
;; Logan Britt
;; W01638650
;;
;; Purpose
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide lookup evaluate)

;;Returns the prodecure in env of the passed symbol sym
;;Returns an error if x is not a symbol in environment env

(define lookup
  (lambda (sym env)
    (if (equal? (length env) 0)
        (error "Symbol does not exist in the environment")
        (if (symbol? sym)
            (if (equal? (car (car env)) sym)
                (car (cdr (car env)))
                (lookup sym (cdr env)))
            (error sym)))
    
    ))

;;If x is a number, return the number x
;;If x is a symbol, returns the value assigned to the symbol in environment env
;;If x is a list, applys evaluate to the list and returns that value

(define evaluate
  (lambda (x env)
    (cond
     ((number? x) x)
     ((symbol? x) (lookup x env))
     ((list? x) (apply (evaluate (car x) env) (map (lambda (y) (evaluate y env)) (cdr x)))))))
